{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ModalService {\n  constructor() {\n    this.modals = [];\n  }\n  register(id) {\n    this.modals.push({\n      id,\n      visible: false\n    });\n  }\n  isModalOpen(id) {\n    return !!this.modals.find(element => element.id === id)?.visible;\n  }\n  toggleModal(id) {\n    const modal = this.modals.find(element => element.id === id)?.visible;\n    if (modal) {\n      modal.visible = !modal.visible;\n    }\n    // this.visible = !this.visible\n  }\n}\n\nModalService.ɵfac = function ModalService_Factory(t) {\n  return new (t || ModalService)();\n};\nModalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ModalService,\n  factory: ModalService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AASA,OAAM,MAAOA,YAAY;EAGvBC;IAFQ,WAAM,GAAa,EAAE;EAEb;EAChBC,QAAQ,CAACC,EAAU;IACjB,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC;MACfF,EAAE;MACFG,OAAO,EAAE;KACV,CAAC;EACJ;EAEAC,WAAW,CAACJ,EAAU;IACpB,OAAO,CAAC,CAAC,IAAI,CAACC,MAAM,CAACI,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACN,EAAE,KAAKA,EAAE,CAAC,EAAEG,OAAO;EACpE;EACAI,WAAW,CAACP,EAAU;IACpB,MAAMQ,KAAK,GAAG,IAAI,CAACP,MAAM,CAACI,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACN,EAAE,KAAKA,EAAE,CAAC,EAAEG,OAAO;IACvE,IAAIK,KAAK,EAAE;MACTA,KAAK,CAACL,OAAO,GAAG,CAACK,KAAK,CAACL,OAAO;;IAEhC;EACF;;;AApBWN,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAY,SAAZZ,YAAY;EAAAa,YAHX;AAAM","names":["ModalService","constructor","register","id","modals","push","visible","isModalOpen","find","element","toggleModal","modal","factory","providedIn"],"sourceRoot":"","sources":["/Users/duran/Documents/Udemy/clips/src/app/services/modal.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\ninterface IModal {\n  id: string\n  visible: boolean\n}\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ModalService {\n  private modals: IModal[] = []\n\n  constructor() { }\n  register(id: string) {\n    this.modals.push({\n      id,\n      visible: false\n    })\n  }\n\n  isModalOpen(id: string): boolean {\n    return !!this.modals.find((element) => element.id === id)?.visible\n  }\n  toggleModal(id: string) {\n    const modal = this.modals.find((element) => element.id === id)?.visible\n    if (modal) {\n      modal.visible = !modal.visible\n    }\n    // this.visible = !this.visible\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}